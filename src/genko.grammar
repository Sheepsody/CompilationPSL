////////////
// Lexing //
////////////

// Implicit symbols

WHITESPACE = _{ " " | "\t" | "\n" }
COMMENT = _{
        ("/*" ~ (!"*/" ~ ANY)* ~ "*/")
    |   ("#" ~ (!NEWLINE ~ ANY)* ~ NEWLINE)
}

// Reserved symbols

LET     = _{ "let" }
FUNC    = _{ "fn" }
IF      = _{ "if" }
THEN    = _{ "then" }
ELSE    = _{ "else" }
WHILE   = _{ "while" }
GLOBAL  = _{ "global" }
RETURN  = _{ "return" }

// Types

uint    = { ASCII_DIGIT+ }          // Not implemented in parser/codegen
int     = { ("-" | "+")? ~ uint }   // Not implemented in parser/codegen

num     = @{ int ~ ("." ~ uint)? ~ ("e" ~ int)? }
bool    = @{ "true" | "false" }

// Operators

binaryop = _{ add | sub | mul | div | pow | eq | ne | le | ge | lt | gt | and | or | modulo }
unaryop  = _{ sub | not }
    add     = @{ "+" }
    sub     = @{ "-" }
    mul     = @{ "*" }
    div     = @{ "/" }
    pow     = @{ "^" }
    eq      = @{ "==" }
    ne      = @{ "!=" }
    le      = @{ "<=" }
    ge      = @{ ">=" }
    lt      = @{ "<" }
    gt      = @{ ">" }
    not     = @{ "!" }
    and     = @{ "&&" }
    or      = @{ "||" }
    modulo  = @{ "%" }

// Identifiers (all alpha strings not above)

ident = @{ ( ASCII_ALPHA | "_" )+ }

/////////////
// Parsing //
/////////////

// Expressions avec retour

callexpr = { ident ~ "(" ~ (expr ~ ("," ~ expr)* )? ~ ")" }

assignexpr = { ident ~ "=" ~ expr }
binaryexpr = { term ~ (binaryop ~ term)*}
unaryexpr = { unaryop ~ term }

term = _{ num | bool | "(" ~ expr ~ ")" | callexpr | ident } // Warning! ident at the end
expr = _{ assignexpr | binaryexpr | unaryexpr }

// Autres

initexpr = { LET ~ ident ~ "=" ~ expr ~ ";" }
globalexpr = { GLOBAL ~ ident ~ "=" ~ expr ~ ";" }

returnexpr = { RETURN ~ expr ~ ";" }

protoexpr = { "(" ~ (ident ~ ("," ~ ident)* )? ~ ")" }
funcexpr = { FUNC ~ ident ~ protoexpr ~ blockexpr }

condexpr = { IF ~ (expr | term) ~ THEN ~ blockexpr ~ (ELSE ~ blockexpr)? }
whileexpr = { WHILE ~ expr ~ blockexpr }

line = _{ initexpr | globalexpr | blockexpr | funcexpr | condexpr | whileexpr | returnexpr | (assignexpr ~ ";") | ( callexpr ~ ";" ) }

// Programme

program = _{ SOI ~ line* ~ expr? ~ EOI }

blockexpr = { "{" ~ line* ~ "}" }
