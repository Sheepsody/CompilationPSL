////////////
// Lexing //
////////////

// Reserved symbols

WHITESPACE = _{ " " | "\t" | "\n" }         // Implicit whitespace
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" } // Implicit comment

LET = _{ "let" }
FUNC = _{ "fn" }
IF = _{ "if" }
THEN = _{ "then" }
ELSE = _{ "else" }

// Types

uint = { ASCII_DIGIT+ }
int = { ("-" | "+")? ~ uint }
num = @{ int ~ ("." ~ uint)? ~ ("e" ~ int)? }

bool = @{ "true" | "false" }

// Operators

operator = _{ add | sub | mul | div | pow | eq | le | ge | lt | gt | and | or}
    add      = @{ "+" }
    sub = @{ "-" }
    mul = @{ "*" }
    div   = @{ "/" }
    pow    = @{ "^" }
    eq     = @{ "==" }
    le     = @{ "<=" }
    ge     = @{ ">=" }
    lt     = @{ "<" }
    gt     = @{ ">" }
    and     = @{ "&&" }
    or     = @{ "||" }

// Identifiers (all alpha strings not above)

ident = @{ ASCII_ALPHA+ }

/////////////
// Parsing //
/////////////

// Expressions avec retour

callexpr = { ident ~ "(" ~ (expr ~ ("," ~ expr)* )? ~ ")" }

assignexpr = { ident ~ "=" ~ expr }
binaryexpr = { term ~ (operator ~ term)*}
unaryexpr = { operator ~ term }

term = _{ num | bool | "(" ~ expr ~ ")" | callexpr | ident } // Warning! ident at the end
expr = _{ assignexpr | binaryexpr | unaryexpr }

// Autres

initexpr = { LET ~ ident ~ "=" ~ expr ~ ";" }

protoexpr = { "(" ~ (ident ~ ("," ~ ident)* )? ~ ")" }
funcexpr = { FUNC ~ ident ~ protoexpr ~ "{" ~ line* ~ expr ~ "}" }

condexpr = { IF ~ term ~ THEN ~ blockexpr ~ (ELSE ~ blockexpr)? }

line = _{ initexpr | (assignexpr ~ ";") | blockexpr | funcexpr | condexpr }

// Programme

program = _{ SOI ~ line* ~ expr ~ EOI }

blockexpr = { "{" ~ line* ~ "}" }
